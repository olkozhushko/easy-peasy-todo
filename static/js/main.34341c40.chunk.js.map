{"version":3,"sources":["model.js","components/FormEdit.jsx","components/Item.jsx","components/List.jsx","components/AddTab.jsx","App.jsx","serviceWorker.js","index.js"],"names":["model","items","general","isEditing","taskToEdit","fetchTodo","thunk","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","actions","res","data","wrap","_context","prev","next","fetch","sent","json","setTodo","stop","_x","apply","this","arguments","action","state","map","el","id","uuid","v4","content","title","completed","toggle","item","remove","filter","add","todo","concat","toConsumableArray","edit","isEditable","addEdited","editedTodo","FormEdit","value","_useState","useState","_useState2","slicedToArray","editedValue","setEditValue","inputRef","useStoreActions","useEffect","focus","react_default","createElement","className","onSubmit","e","preventDefault","htmlFor","type","ref","onChange","target","Item","_useStoreActions","onClick","style","textDecoration","cursor","List","useStoreState","_useStoreState","components_FormEdit","key","components_Item","AddTab","setContent","store","createStore","Header","ToDo","easy_peasy_esm","App_Header","components_AddTab","components_List","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kRAGeA,EAAA,CACXC,MAAO,GACPC,QAAS,CACLC,WAAW,EACXC,WAAY,MAGhBC,UAAWC,YAAK,eAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAC,SAAAC,EAAMC,GAAN,IAAAC,EAAAC,EAAA,OAAAN,EAAAC,EAAAM,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACKC,MAAM,uDADX,cACPN,EADOG,EAAAI,KAAAJ,EAAAE,KAAA,EAEML,EAAIQ,OAFV,OAEPP,EAFOE,EAAAI,KAIbR,EAAQU,QAAQR,GAJH,wBAAAE,EAAAO,SAAAZ,MAAD,gBAAAa,GAAA,OAAAnB,EAAAoB,MAAAC,KAAAC,YAAA,IAOhBL,QAASM,YAAO,SAACC,EAAOf,GACpBe,EAAM9B,MAAQe,EAAKgB,IAAI,SAAAC,GAMnB,MALc,CACVC,GAAIC,IAAKC,KACTC,QAASJ,EAAGK,MACZC,UAAWN,EAAGM,eAK1BC,OAAQV,YAAO,SAACC,EAAOG,GACnBH,EAAM9B,MAAM+B,IAAI,SAAAS,GAIZ,OAHGA,EAAKP,KAAOA,IACXO,EAAKF,WAAaE,EAAKF,WAEpBE,MAGfC,OAAQZ,YAAO,SAACC,EAAOG,GACnBH,EAAM9B,MAAQ8B,EAAM9B,MAAM0C,OAAO,SAAAV,GAAE,OAAIA,EAAGC,KAAOA,MAErDU,IAAKd,YAAO,SAACC,EAAOc,GAClBA,EAAKX,GAAKC,IAAKC,KACfL,EAAM9B,MAAN,GAAA6C,OAAAtC,OAAAuC,EAAA,EAAAvC,CAAkBuB,EAAM9B,OAAxB,CAA+B4C,MAEjCG,KAAMlB,YAAO,SAACC,EAAOG,GACjB,IAAM9B,EAAa2B,EAAM9B,MAAM0C,OAAO,SAAAV,GAAE,OAAIA,EAAGC,KAAOA,IACtDH,EAAM7B,QAAU,CACZ+C,YAAY,EACZ7C,WAAYA,EAAW,MAG/B8C,UAAWpB,YAAO,SAACC,EAAOoB,GACtBpB,EAAM9B,MAAQ8B,EAAM9B,MAAM+B,IAAI,SAAAC,GAI1B,OAHGA,EAAGC,KAAOiB,EAAWjB,KACpBD,EAAGI,QAAUc,EAAWd,SAErBJ,IAEXF,EAAM7B,QAAU,CACZC,WAAW,EACXC,WAAY,gBCbTgD,EA1CE,SAAA7C,GAAmB,IAAhB8C,EAAgB9C,EAAhB8C,MAAOnB,EAAS3B,EAAT2B,GAASoB,EACEC,mBAASF,GADXG,EAAAhD,OAAAiD,EAAA,EAAAjD,CAAA8C,EAAA,GAC3BI,EAD2BF,EAAA,GACdG,EADcH,EAAA,GAG9BI,EAAW,KAETV,EAAYW,YAAgB,SAAA/C,GAAO,OAAIA,EAAQoC,YAMrD,OAJAY,oBAAU,WACRF,EAASG,UAITC,EAAArD,EAAAsD,cAAA,QACEC,UAAS,mEACTC,SAAU,SAAAC,GACRA,EAAEC,iBACGX,GACLR,EAAU,CACRb,QAASqB,EACTxB,SAIJ8B,EAAArD,EAAAsD,cAAA,SAAOK,QAAQ,SACfN,EAAArD,EAAAsD,cAAA,SACEM,KAAK,OACLL,UAAU,2EAEVhC,GAAG,OACHmB,MAAOK,EACPc,IAAK,SAAAvC,GAAE,OAAK2B,EAAW3B,GACvBwC,SAAU,SAAAL,GACRT,EAAaS,EAAEM,OAAOrB,UAG1BW,EAAArD,EAAAsD,cAAA,UAAQM,KAAK,SAASL,UAAU,eAAhC,YCASS,EAnCF,SAAApE,GAAc,IAAXsC,EAAWtC,EAAXsC,KAAW+B,EACQf,YAAgB,SAAA/C,GAAO,MAAK,CAC3D0B,OAAQ1B,EAAQ0B,OAChBE,OAAQ5B,EAAQ4B,OAChBM,KAAMlC,EAAQkC,QAHRR,EADiBoC,EACjBpC,OAAQE,EADSkC,EACTlC,OAAQM,EADC4B,EACD5B,KAMxB,OACEgB,EAAArD,EAAAsD,cAAA,MACEC,UAAU,4DAEVF,EAAArD,EAAAsD,cAAA,QACEY,QAAS,SAAAT,GAEL5B,EAAOK,EAAKX,KAEhB4C,MAAO,CAAEC,eAAgBlC,EAAKN,UAAY,eAAiB,OAAQyC,OAAQ,YAE1EnC,EAAKR,SAER2B,EAAArD,EAAAsD,cAAA,OAAKC,UAAU,iBACbF,EAAArD,EAAAsD,cAAA,UACEC,UAAU,yBACVW,QAAS,kBAAM7B,EAAKH,EAAKX,MAF3B,QAMA8B,EAAArD,EAAAsD,cAAA,UAAQC,UAAU,aAAaW,QAAS,kBAAMnC,EAAOG,EAAKX,MAA1D,aCOO+C,EA/BF,WACX,IAAMhF,EAAQiF,YAAc,SAAAnD,GAAK,OAAIA,EAAM9B,QACrCI,EAAYwD,YAAgB,SAAA/C,GAAO,OAAIA,EAAQT,YAErDyD,oBAAU,WACRzD,KAEC,IAPc,IAAA8E,EASkBD,YAAc,SAAAnD,GAAK,OAAIA,EAAM7B,UAAxD+C,EATSkC,EASTlC,WAAY7C,EATH+E,EASG/E,WAEpB,OACE4D,EAAArD,EAAAsD,cAAA,MAAIC,UAAU,wBACXjE,EAAM+B,IAAI,SAAAS,GACT,OAAIQ,GACE7C,EAAW8B,KAAOO,EAAKP,GAEvB8B,EAAArD,EAAAsD,cAACmB,EAAD,CACEC,IAAKjF,EAAW8B,GAChBmB,MAAOjD,EAAWiC,QAClBH,GAAI9B,EAAW8B,KAKhB8B,EAAArD,EAAAsD,cAACqB,EAAD,CAAMD,IAAK5C,EAAKP,GAAIW,KAAMJ,QCW1B8C,EAvCA,WAAM,IAAAjC,EACWC,mBAAS,IADpBC,EAAAhD,OAAAiD,EAAA,EAAAjD,CAAA8C,EAAA,GACZjB,EADYmB,EAAA,GACHgC,EADGhC,EAAA,GAGXZ,EAAQiB,YAAgB,SAAA/C,GAAO,MAAK,CAC1C8B,IAAK9B,EAAQ8B,OADPA,IAIR,OACEoB,EAAArD,EAAAsD,cAAA,QACEC,UAAU,aACVC,SAAU,SAAAC,GACRA,EAAEC,iBACGhC,IACLO,EAAI,CACFP,UACAE,WAAW,IAEbiD,EAAW,OAGbxB,EAAArD,EAAAsD,cAAA,KAAGC,UAAU,yBACXF,EAAArD,EAAAsD,cAAA,SAAOK,QAAQ,UACfN,EAAArD,EAAAsD,cAAA,SACEM,KAAK,OACLrC,GAAG,QACHgC,UAAU,QACVO,SAAU,SAAAL,GAAC,OAAIoB,EAAWpB,EAAEM,OAAOrB,QACnCA,MAAOhB,KAGX2B,EAAArD,EAAAsD,cAAA,SACEM,KAAK,SACLlB,MAAM,WACNa,UAAU,+BCzBZuB,eAAQC,YAAY1F,IAc1B,IAAM2F,EAAS,WACb,OACE3B,EAAArD,EAAAsD,cAAA,cACED,EAAArD,EAAAsD,cAAA,MAAIC,UAAU,yBAAd,4CAMS0B,EArBf,WACE,OACE5B,EAAArD,EAAAsD,cAAC4B,EAAA,EAAD,CAAeJ,MAAOA,GACpBzB,EAAArD,EAAAsD,cAAA,OAAKC,UAAU,qCACbF,EAAArD,EAAAsD,cAAC6B,EAAD,MACA9B,EAAArD,EAAAsD,cAAC8B,EAAD,MACA/B,EAAArD,EAAAsD,cAAC+B,EAAD,SCPYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvC,EAAArD,EAAAsD,cAACuC,EAAD,MAAUC,SAASC,eAAe,SD2H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.34341c40.chunk.js","sourcesContent":["import { action, thunk } from \"easy-peasy\";\nimport uuid from \"uuid\";\n\nexport default {\n    items: [],\n    general: {\n        isEditing: false,\n        taskToEdit: null\n    },\n    //thunks\n    fetchTodo: thunk(async actions => {\n        const res = await fetch(\"https://jsonplaceholder.typicode.com/todos?_limit=5\");\n        const data = await res.json();\n\n        actions.setTodo(data);\n    }),\n    //actions\n    setTodo: action((state, data) => {\n        state.items = data.map(el => {\n            const newEl = {\n                id: uuid.v4(),\n                content: el.title,\n                completed: el.completed\n            }\n            return newEl;\n        })\n    }),\n    toggle: action((state, id) => {\n        state.items.map(item => {\n            if(item.id === id) {\n                item.completed = !item.completed;\n            }\n            return item;\n        })\n    }),\n    remove: action((state, id) => {\n        state.items = state.items.filter(el => el.id !== id);\n    }),\n    add: action((state, todo) => {\n      todo.id = uuid.v4();\n      state.items = [...state.items, todo];\n    }),\n    edit: action((state, id) => {\n        const taskToEdit = state.items.filter(el => el.id === id);\n        state.general = {\n            isEditable: true,\n            taskToEdit: taskToEdit[0]\n        }\n    }),\n    addEdited: action((state, editedTodo) => {\n        state.items = state.items.map(el => {\n            if(el.id === editedTodo.id) {\n                el.content = editedTodo.content;\n            }\n            return el;\n        })\n        state.general = {\n            isEditing: false,\n            taskToEdit: null\n        }\n    })\n}","import React, { useState, useEffect } from \"react\";\nimport { useStoreActions } from \"easy-peasy\";\n\nconst FormEdit = ({ value, id }) => {\n  const [editedValue, setEditValue] = useState(value);\n\n  let inputRef = null;\n\n  const addEdited = useStoreActions(actions => actions.addEdited);\n\n  useEffect(() => {\n    inputRef.focus();\n  });\n\n  return (\n    <form\n      className={`list-group-item d-flex justify-content-center align-items-center`}\n      onSubmit={e => {\n        e.preventDefault();\n        if (!editedValue) return;\n        addEdited({\n          content: editedValue,\n          id\n        });\n      }}\n    >\n      <label htmlFor=\"edit\" />\n      <input\n        type=\"text\"\n        className=\"form-control h-100 border-left-0 \n            border-right-0 border-top-0 edit-input\"\n        id=\"edit\"\n        value={editedValue}\n        ref={el => (inputRef = el)}\n        onChange={e => {\n          setEditValue(e.target.value);\n        }}\n      />\n      <button type=\"submit\" className=\"btn-success\">\n        Finish\n      </button>\n    </form>\n  );\n};\n\nexport default FormEdit;\n","import React from \"react\";\nimport { useStoreActions } from \"easy-peasy\";\n\nconst Item = ({ todo }) => {\n  const { toggle, remove, edit } = useStoreActions(actions => ({\n    toggle: actions.toggle,\n    remove: actions.remove,\n    edit: actions.edit\n  }));\n\n  return (\n    <li\n      className=\"todo-item list-group-item d-flex justify-content-between\"\n    >\n      <span\n        onClick={e => {\n            // if (e.target.tagName === \"BUTTON\") return;\n            toggle(todo.id);\n        }}\n        style={{ textDecoration: todo.completed ? \"line-through\" : \"none\", cursor: \"pointer\"}}\n      >\n        {todo.content}\n      </span>\n      <div className=\"task-controls\">\n        <button\n          className=\"edit-btn btn-info mr-2\"\n          onClick={() => edit(todo.id)}\n        >\n          Edit\n        </button>\n        <button className=\"btn-danger\" onClick={() => remove(todo.id)}>\n          Remove\n        </button>\n      </div>\n    </li>\n  );\n};\n\nexport default Item;\n","import React, { useEffect } from \"react\";\nimport { useStoreState, useStoreActions } from \"easy-peasy\";\n\nimport FormEdit from \"./FormEdit\";\nimport Item from \"./Item\";\n\nconst List = () => {\n  const items = useStoreState(state => state.items);\n  const fetchTodo = useStoreActions(actions => actions.fetchTodo);\n\n  useEffect(() => {\n    fetchTodo();\n    // eslint-disable-next-line\n  }, []);\n\n  const { isEditable, taskToEdit } = useStoreState(state => state.general);\n\n  return (\n    <ul className=\"list-group todo-list\">\n      {items.map(item => {\n        if (isEditable) {\n          if (taskToEdit.id === item.id) {\n            return (\n              <FormEdit\n                key={taskToEdit.id}\n                value={taskToEdit.content}\n                id={taskToEdit.id}\n              />\n            );\n          }\n        }\n        return <Item key={item.id} todo={item} />;\n      })}\n    </ul>\n  );\n};\n\nexport default List;\n","import React, { useState} from \"react\";\nimport { useStoreActions } from \"easy-peasy\";\n\nconst AddTab = () => {\n  const [content, setContent] = useState(\"\");\n\n  const { add } = useStoreActions(actions => ({\n    add: actions.add\n  }));\n\n  return (\n    <form\n      className=\"w-100 my-3\"\n      onSubmit={e => {\n        e.preventDefault();\n        if (!content) return;\n        add({\n          content,\n          completed: false\n        });\n        setContent(\"\");\n      }}\n    >\n      <p className=\"form-group w-100 mt-0\">\n        <label htmlFor=\"title\" />\n        <input\n          type=\"text\"\n          id=\"title\"\n          className=\"w-100\"\n          onChange={e => setContent(e.target.value)}\n          value={content}\n        />\n      </p>\n      <input\n        type=\"submit\"\n        value=\"Add Task\"\n        className=\"form-control btn-primary\"\n      />\n    </form>\n  );\n};\n\nexport default AddTab;\n","import React from \"react\";\nimport { StoreProvider, createStore} from \"easy-peasy\";\n\nimport model from \"./model\";\n\nimport List from \"./components/List\";\nimport AddTab from \"./components/AddTab\";\n\nimport \"./App.css\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\n\nconst store = createStore(model);\n\nfunction ToDo() {\n  return (\n    <StoreProvider store={store}>\n      <div className=\"w-75 my-4 mx-auto ml-4 min-vh-100\">\n        <Header />\n        <AddTab />\n        <List />\n      </div>\n    </StoreProvider>\n  );\n}\n\nconst Header = () => {\n  return (\n    <header>\n      <h1 className=\"text-center text-dark\">ToDO App built with easy-peasy library</h1>\n    </header>\n  )\n}\n\n\nexport default ToDo;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport ToDo from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<ToDo />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}